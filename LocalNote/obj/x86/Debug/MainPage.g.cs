#pragma checksum "C:\Users\varax\source\repos\LocalNote\LocalNote\MainPage.xaml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "54377271003D87C0C62554E1D4217D09FAEFF4B125D37FD1A54937FA8B6BD87B"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LocalNote
{
    partial class MainPage : 
        global::Windows.UI.Xaml.Controls.Page, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_Windows_UI_Xaml_Data_CollectionViewSource_Source(global::Windows.UI.Xaml.Data.CollectionViewSource obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.Source = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_TextBlock_Text(global::Windows.UI.Xaml.Controls.TextBlock obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(global::Windows.UI.Xaml.Controls.Primitives.ButtonBase obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.Command = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_TextBox_Text(global::Windows.UI.Xaml.Controls.TextBox obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_Windows_UI_Xaml_Controls_Primitives_Selector_SelectedItem(global::Windows.UI.Xaml.Controls.Primitives.Selector obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.SelectedItem = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_RichEditBox_IsReadOnly(global::Windows.UI.Xaml.Controls.RichEditBox obj, global::System.Boolean value)
            {
                obj.IsReadOnly = value;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class MainPage_obj20_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IMainPage_Bindings
        {
            private global::LocalNote.Models.NoteModel dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj20;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj20TextDisabled = false;

            private MainPage_obj20_BindingsTracking bindingsTracking;

            public MainPage_obj20_Bindings()
            {
                this.bindingsTracking = new MainPage_obj20_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 95 && columnNumber == 32)
                {
                    isobj20TextDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 20: // MainPage.xaml line 95
                        this.obj20 = new global::System.WeakReference((global::Windows.UI.Xaml.Controls.TextBlock)target);
                        this.bindingsTracking.RegisterTwoWayListener_20((this.obj20.Target as global::Windows.UI.Xaml.Controls.TextBlock));
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            (this.obj20.Target as global::Windows.UI.Xaml.Controls.TextBlock).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::LocalNote.Models.NoteModel) item, 1 << phase);
            }

            public void Recycle()
            {
                this.bindingsTracking.ReleaseAllListeners();
            }

            // IMainPage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::LocalNote.Models.NoteModel)newDataRoot;
                    return true;
                }
                return false;
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::LocalNote.Models.NoteModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Title(obj.Title, phase);
                    }
                }
            }
            private void Update_Title(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainPage.xaml line 95
                    if (!isobj20TextDisabled)
                    {
                        if ((this.obj20.Target as global::Windows.UI.Xaml.Controls.TextBlock) != null)
                        {
                            XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text((this.obj20.Target as global::Windows.UI.Xaml.Controls.TextBlock), obj, null);
                        }
                    }
                }
            }
            private void UpdateTwoWay_20_Text()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        this.dataRoot.Title = (this.obj20.Target as global::Windows.UI.Xaml.Controls.TextBlock).Text;
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class MainPage_obj20_BindingsTracking
            {
                private global::System.WeakReference<MainPage_obj20_Bindings> weakRefToBindingObj; 

                public MainPage_obj20_BindingsTracking(MainPage_obj20_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<MainPage_obj20_Bindings>(obj);
                }

                public MainPage_obj20_Bindings TryGetBindingObject()
                {
                    MainPage_obj20_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                }

                public void PropertyChanged_(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MainPage_obj20_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::LocalNote.Models.NoteModel obj = sender as global::LocalNote.Models.NoteModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_Title(obj.Title, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Title":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Title(obj.Title, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void UpdateChildListeners_(global::LocalNote.Models.NoteModel obj)
                {
                    MainPage_obj20_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        if (bindings.dataRoot != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)bindings.dataRoot).PropertyChanged -= PropertyChanged_;
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_;
                        }
                    }
                }
                public void RegisterTwoWayListener_20(global::Windows.UI.Xaml.Controls.TextBlock sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.TextBlock.TextProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_20_Text();
                        }
                    });
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class MainPage_obj1_Bindings :
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IMainPage_Bindings
        {
            private global::LocalNote.MainPage dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);

            // Fields for each control that has bindings.
            private global::Windows.UI.Xaml.Data.CollectionViewSource obj2;
            private global::Windows.UI.Xaml.Controls.TextBlock obj3;
            private global::Windows.UI.Xaml.Controls.AppBarButton obj4;
            private global::Windows.UI.Xaml.Controls.AppBarButton obj5;
            private global::Windows.UI.Xaml.Controls.AppBarButton obj6;
            private global::Windows.UI.Xaml.Controls.AppBarButton obj7;
            private global::Windows.UI.Xaml.Controls.AppBarButton obj8;
            private global::Windows.UI.Xaml.Controls.AppBarButton obj9;
            private global::Windows.UI.Xaml.Controls.AppBarButton obj10;
            private global::Windows.UI.Xaml.Controls.AppBarButton obj11;
            private global::Windows.UI.Xaml.Controls.AppBarButton obj12;
            private global::Windows.UI.Xaml.Controls.AppBarButton obj13;
            private global::Windows.UI.Xaml.Controls.AppBarButton obj14;
            private global::Windows.UI.Xaml.Controls.AppBarButton obj15;
            private global::Windows.UI.Xaml.Controls.TextBox obj16;
            private global::Windows.UI.Xaml.Controls.ListView obj17;
            private global::Windows.UI.Xaml.Controls.RichEditBox obj18;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj2SourceDisabled = false;
            private static bool isobj3TextDisabled = false;
            private static bool isobj4CommandDisabled = false;
            private static bool isobj5CommandDisabled = false;
            private static bool isobj6CommandDisabled = false;
            private static bool isobj7CommandDisabled = false;
            private static bool isobj8CommandDisabled = false;
            private static bool isobj9CommandDisabled = false;
            private static bool isobj10CommandDisabled = false;
            private static bool isobj11CommandDisabled = false;
            private static bool isobj12CommandDisabled = false;
            private static bool isobj13CommandDisabled = false;
            private static bool isobj14CommandDisabled = false;
            private static bool isobj15CommandDisabled = false;
            private static bool isobj16TextDisabled = false;
            private static bool isobj17SelectedItemDisabled = false;
            private static bool isobj18IsReadOnlyDisabled = false;

            private MainPage_obj1_BindingsTracking bindingsTracking;

            public MainPage_obj1_Bindings()
            {
                this.bindingsTracking = new MainPage_obj1_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 15 && columnNumber == 56)
                {
                    isobj2SourceDisabled = true;
                }
                else if (lineNumber == 21 && columnNumber == 47)
                {
                    isobj3TextDisabled = true;
                }
                else if (lineNumber == 25 && columnNumber == 31)
                {
                    isobj4CommandDisabled = true;
                }
                else if (lineNumber == 27 && columnNumber == 31)
                {
                    isobj5CommandDisabled = true;
                }
                else if (lineNumber == 31 && columnNumber == 27)
                {
                    isobj6CommandDisabled = true;
                }
                else if (lineNumber == 34 && columnNumber == 27)
                {
                    isobj7CommandDisabled = true;
                }
                else if (lineNumber == 37 && columnNumber == 27)
                {
                    isobj8CommandDisabled = true;
                }
                else if (lineNumber == 40 && columnNumber == 27)
                {
                    isobj9CommandDisabled = true;
                }
                else if (lineNumber == 44 && columnNumber == 27)
                {
                    isobj10CommandDisabled = true;
                }
                else if (lineNumber == 53 && columnNumber == 17)
                {
                    isobj11CommandDisabled = true;
                }
                else if (lineNumber == 57 && columnNumber == 17)
                {
                    isobj12CommandDisabled = true;
                }
                else if (lineNumber == 62 && columnNumber == 17)
                {
                    isobj13CommandDisabled = true;
                }
                else if (lineNumber == 66 && columnNumber == 17)
                {
                    isobj14CommandDisabled = true;
                }
                else if (lineNumber == 70 && columnNumber == 17)
                {
                    isobj15CommandDisabled = true;
                }
                else if (lineNumber == 86 && columnNumber == 18)
                {
                    isobj16TextDisabled = true;
                }
                else if (lineNumber == 91 && columnNumber == 13)
                {
                    isobj17SelectedItemDisabled = true;
                }
                else if (lineNumber == 107 && columnNumber == 13)
                {
                    isobj18IsReadOnlyDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 2: // MainPage.xaml line 15
                        this.obj2 = (global::Windows.UI.Xaml.Data.CollectionViewSource)target;
                        break;
                    case 3: // MainPage.xaml line 21
                        this.obj3 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        this.bindingsTracking.RegisterTwoWayListener_3(this.obj3);
                        break;
                    case 4: // MainPage.xaml line 24
                        this.obj4 = (global::Windows.UI.Xaml.Controls.AppBarButton)target;
                        break;
                    case 5: // MainPage.xaml line 26
                        this.obj5 = (global::Windows.UI.Xaml.Controls.AppBarButton)target;
                        break;
                    case 6: // MainPage.xaml line 29
                        this.obj6 = (global::Windows.UI.Xaml.Controls.AppBarButton)target;
                        break;
                    case 7: // MainPage.xaml line 32
                        this.obj7 = (global::Windows.UI.Xaml.Controls.AppBarButton)target;
                        break;
                    case 8: // MainPage.xaml line 35
                        this.obj8 = (global::Windows.UI.Xaml.Controls.AppBarButton)target;
                        break;
                    case 9: // MainPage.xaml line 38
                        this.obj9 = (global::Windows.UI.Xaml.Controls.AppBarButton)target;
                        break;
                    case 10: // MainPage.xaml line 42
                        this.obj10 = (global::Windows.UI.Xaml.Controls.AppBarButton)target;
                        break;
                    case 11: // MainPage.xaml line 50
                        this.obj11 = (global::Windows.UI.Xaml.Controls.AppBarButton)target;
                        break;
                    case 12: // MainPage.xaml line 54
                        this.obj12 = (global::Windows.UI.Xaml.Controls.AppBarButton)target;
                        break;
                    case 13: // MainPage.xaml line 59
                        this.obj13 = (global::Windows.UI.Xaml.Controls.AppBarButton)target;
                        break;
                    case 14: // MainPage.xaml line 63
                        this.obj14 = (global::Windows.UI.Xaml.Controls.AppBarButton)target;
                        break;
                    case 15: // MainPage.xaml line 67
                        this.obj15 = (global::Windows.UI.Xaml.Controls.AppBarButton)target;
                        break;
                    case 16: // MainPage.xaml line 84
                        this.obj16 = (global::Windows.UI.Xaml.Controls.TextBox)target;
                        this.bindingsTracking.RegisterTwoWayListener_16(this.obj16);
                        break;
                    case 17: // MainPage.xaml line 88
                        this.obj17 = (global::Windows.UI.Xaml.Controls.ListView)target;
                        this.bindingsTracking.RegisterTwoWayListener_17(this.obj17);
                        break;
                    case 18: // MainPage.xaml line 100
                        this.obj18 = (global::Windows.UI.Xaml.Controls.RichEditBox)target;
                        this.bindingsTracking.RegisterTwoWayListener_18(this.obj18);
                        break;
                    default:
                        break;
                }
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
            }

            public void Recycle()
            {
                return;
            }

            // IMainPage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::LocalNote.MainPage)newDataRoot;
                    return true;
                }
                return false;
            }

            public void Loading(global::Windows.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::LocalNote.MainPage obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_NoteViewModel(obj.NoteViewModel, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_AboutCommand(obj.AboutCommand, phase);
                    }
                }
            }
            private void Update_NoteViewModel(global::LocalNote.ViewModels.NoteViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_NoteViewModel(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_NoteViewModel_NotesForLV(obj.NotesForLV, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_NoteViewModel_NoteTitle(obj.NoteTitle, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_NoteViewModel_ExitCommand(obj.ExitCommand, phase);
                        this.Update_NoteViewModel_AddCommand(obj.AddCommand, phase);
                        this.Update_NoteViewModel_SaveCommand(obj.SaveCommand, phase);
                        this.Update_NoteViewModel_EditCommand(obj.EditCommand, phase);
                        this.Update_NoteViewModel_CancelCommand(obj.CancelCommand, phase);
                        this.Update_NoteViewModel_DeleteCommand(obj.DeleteCommand, phase);
                        this.Update_NoteViewModel_FontIncrease(obj.FontIncrease, phase);
                        this.Update_NoteViewModel_FontDecrease(obj.FontDecrease, phase);
                        this.Update_NoteViewModel_BoldCommand(obj.BoldCommand, phase);
                        this.Update_NoteViewModel_ItalicCommand(obj.ItalicCommand, phase);
                        this.Update_NoteViewModel_UnderlineCommand(obj.UnderlineCommand, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_NoteViewModel_Filter(obj.Filter, phase);
                        this.Update_NoteViewModel_SelectedNote(obj.SelectedNote, phase);
                        this.Update_NoteViewModel_ReadOnly(obj.ReadOnly, phase);
                    }
                }
            }
            private void Update_NoteViewModel_NotesForLV(global::System.Collections.ObjectModel.ObservableCollection<global::LocalNote.Models.NoteModel> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // MainPage.xaml line 15
                    if (!isobj2SourceDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Data_CollectionViewSource_Source(this.obj2, obj, null);
                    }
                }
            }
            private void Update_NoteViewModel_NoteTitle(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainPage.xaml line 21
                    if (!isobj3TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj3, obj, null);
                    }
                }
            }
            private void Update_AboutCommand(global::LocalNote.Commands.AboutCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // MainPage.xaml line 24
                    if (!isobj4CommandDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj4, obj, null);
                    }
                }
            }
            private void Update_NoteViewModel_ExitCommand(global::LocalNote.Commands.ExitCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // MainPage.xaml line 26
                    if (!isobj5CommandDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj5, obj, null);
                    }
                }
            }
            private void Update_NoteViewModel_AddCommand(global::LocalNote.Commands.AddCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // MainPage.xaml line 29
                    if (!isobj6CommandDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj6, obj, null);
                    }
                }
            }
            private void Update_NoteViewModel_SaveCommand(global::LocalNote.Commands.SaveCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // MainPage.xaml line 32
                    if (!isobj7CommandDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj7, obj, null);
                    }
                }
            }
            private void Update_NoteViewModel_EditCommand(global::LocalNote.Commands.EditCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // MainPage.xaml line 35
                    if (!isobj8CommandDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj8, obj, null);
                    }
                }
            }
            private void Update_NoteViewModel_CancelCommand(global::LocalNote.Commands.CancelCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // MainPage.xaml line 38
                    if (!isobj9CommandDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj9, obj, null);
                    }
                }
            }
            private void Update_NoteViewModel_DeleteCommand(global::LocalNote.Commands.DeleteCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // MainPage.xaml line 42
                    if (!isobj10CommandDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj10, obj, null);
                    }
                }
            }
            private void Update_NoteViewModel_FontIncrease(global::LocalNote.Commands.EditorCommands.FontIncrease obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // MainPage.xaml line 50
                    if (!isobj11CommandDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj11, obj, null);
                    }
                }
            }
            private void Update_NoteViewModel_FontDecrease(global::LocalNote.Commands.EditorCommands.FontDecrease obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // MainPage.xaml line 54
                    if (!isobj12CommandDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj12, obj, null);
                    }
                }
            }
            private void Update_NoteViewModel_BoldCommand(global::LocalNote.Commands.EditorCommands.BoldCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // MainPage.xaml line 59
                    if (!isobj13CommandDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj13, obj, null);
                    }
                }
            }
            private void Update_NoteViewModel_ItalicCommand(global::LocalNote.Commands.EditorCommands.ItalicCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // MainPage.xaml line 63
                    if (!isobj14CommandDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj14, obj, null);
                    }
                }
            }
            private void Update_NoteViewModel_UnderlineCommand(global::LocalNote.Commands.EditorCommands.UnderlineCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // MainPage.xaml line 67
                    if (!isobj15CommandDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj15, obj, null);
                    }
                }
            }
            private void Update_NoteViewModel_Filter(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainPage.xaml line 84
                    if (!isobj16TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBox_Text(this.obj16, obj, null);
                    }
                }
            }
            private void Update_NoteViewModel_SelectedNote(global::LocalNote.Models.NoteModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_NoteViewModel_SelectedNote(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainPage.xaml line 88
                    if (!isobj17SelectedItemDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_Selector_SelectedItem(this.obj17, obj, null);
                    }
                }
            }
            private void Update_NoteViewModel_ReadOnly(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainPage.xaml line 100
                    if (!isobj18IsReadOnlyDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_RichEditBox_IsReadOnly(this.obj18, obj);
                    }
                }
            }
            private void UpdateTwoWay_3_Text()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.NoteViewModel != null)
                        {
                            this.dataRoot.NoteViewModel.NoteTitle = this.obj3.Text;
                        }
                    }
                }
            }
            private void UpdateTwoWay_16_Text()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.NoteViewModel != null)
                        {
                            this.dataRoot.NoteViewModel.Filter = this.obj16.Text;
                        }
                    }
                }
            }
            private void UpdateTwoWay_17_SelectedItem()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.NoteViewModel != null)
                        {
                            this.dataRoot.NoteViewModel.SelectedNote = (global::LocalNote.Models.NoteModel)this.obj17.SelectedItem;
                        }
                    }
                }
            }
            private void UpdateTwoWay_18_IsReadOnly()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.NoteViewModel != null)
                        {
                            this.dataRoot.NoteViewModel.ReadOnly = this.obj18.IsReadOnly;
                        }
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class MainPage_obj1_BindingsTracking
            {
                private global::System.WeakReference<MainPage_obj1_Bindings> weakRefToBindingObj; 

                public MainPage_obj1_BindingsTracking(MainPage_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<MainPage_obj1_Bindings>(obj);
                }

                public MainPage_obj1_Bindings TryGetBindingObject()
                {
                    MainPage_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_NoteViewModel(null);
                    UpdateChildListeners_NoteViewModel_SelectedNote(null);
                }

                public void PropertyChanged_NoteViewModel(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MainPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::LocalNote.ViewModels.NoteViewModel obj = sender as global::LocalNote.ViewModels.NoteViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_NoteViewModel_NoteTitle(obj.NoteTitle, DATA_CHANGED);
                                bindings.Update_NoteViewModel_Filter(obj.Filter, DATA_CHANGED);
                                bindings.Update_NoteViewModel_SelectedNote(obj.SelectedNote, DATA_CHANGED);
                                bindings.Update_NoteViewModel_ReadOnly(obj.ReadOnly, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "NoteTitle":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_NoteViewModel_NoteTitle(obj.NoteTitle, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Filter":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_NoteViewModel_Filter(obj.Filter, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SelectedNote":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_NoteViewModel_SelectedNote(obj.SelectedNote, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ReadOnly":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_NoteViewModel_ReadOnly(obj.ReadOnly, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::LocalNote.ViewModels.NoteViewModel cache_NoteViewModel = null;
                public void UpdateChildListeners_NoteViewModel(global::LocalNote.ViewModels.NoteViewModel obj)
                {
                    if (obj != cache_NoteViewModel)
                    {
                        if (cache_NoteViewModel != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_NoteViewModel).PropertyChanged -= PropertyChanged_NoteViewModel;
                            cache_NoteViewModel = null;
                        }
                        if (obj != null)
                        {
                            cache_NoteViewModel = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_NoteViewModel;
                        }
                    }
                }
                public void PropertyChanged_NoteViewModel_SelectedNote(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MainPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::LocalNote.Models.NoteModel obj = sender as global::LocalNote.Models.NoteModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::LocalNote.Models.NoteModel cache_NoteViewModel_SelectedNote = null;
                public void UpdateChildListeners_NoteViewModel_SelectedNote(global::LocalNote.Models.NoteModel obj)
                {
                    if (obj != cache_NoteViewModel_SelectedNote)
                    {
                        if (cache_NoteViewModel_SelectedNote != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_NoteViewModel_SelectedNote).PropertyChanged -= PropertyChanged_NoteViewModel_SelectedNote;
                            cache_NoteViewModel_SelectedNote = null;
                        }
                        if (obj != null)
                        {
                            cache_NoteViewModel_SelectedNote = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_NoteViewModel_SelectedNote;
                        }
                    }
                }
                public void RegisterTwoWayListener_3(global::Windows.UI.Xaml.Controls.TextBlock sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.TextBlock.TextProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_3_Text();
                        }
                    });
                }
                public void RegisterTwoWayListener_16(global::Windows.UI.Xaml.Controls.TextBox sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.TextBox.TextProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_16_Text();
                        }
                    });
                }
                public void RegisterTwoWayListener_17(global::Windows.UI.Xaml.Controls.ListView sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Primitives.Selector.SelectedItemProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_17_SelectedItem();
                        }
                    });
                }
                public void RegisterTwoWayListener_18(global::Windows.UI.Xaml.Controls.RichEditBox sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.RichEditBox.IsReadOnlyProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_18_IsReadOnly();
                        }
                    });
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 2: // MainPage.xaml line 15
                {
                    this.NotesCollection = (global::Windows.UI.Xaml.Data.CollectionViewSource)(target);
                }
                break;
            case 3: // MainPage.xaml line 21
                {
                    this.NoteTitle = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 4: // MainPage.xaml line 24
                {
                    this.About = (global::Windows.UI.Xaml.Controls.AppBarButton)(target);
                }
                break;
            case 5: // MainPage.xaml line 26
                {
                    this.Exit = (global::Windows.UI.Xaml.Controls.AppBarButton)(target);
                }
                break;
            case 16: // MainPage.xaml line 84
                {
                    this.SearchBox = (global::Windows.UI.Xaml.Controls.TextBox)(target);
                }
                break;
            case 17: // MainPage.xaml line 88
                {
                    this.notesListView = (global::Windows.UI.Xaml.Controls.ListView)(target);
                }
                break;
            case 18: // MainPage.xaml line 100
                {
                    this.editor = (global::Windows.UI.Xaml.Controls.RichEditBox)(target);
                    ((global::Windows.UI.Xaml.Controls.RichEditBox)this.editor).TextChanged += this.Editor_TextChanged;
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // MainPage.xaml line 1
                {                    
                    global::Windows.UI.Xaml.Controls.Page element1 = (global::Windows.UI.Xaml.Controls.Page)target;
                    MainPage_obj1_Bindings bindings = new MainPage_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element1, bindings);
                }
                break;
            case 20: // MainPage.xaml line 95
                {                    
                    global::Windows.UI.Xaml.Controls.TextBlock element20 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                    MainPage_obj20_Bindings bindings = new MainPage_obj20_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element20.DataContext);
                    element20.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element20, bindings);
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element20, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

